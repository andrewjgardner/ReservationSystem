// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservationSystem.Data.Context;

#nullable disable

namespace ReservationSystem.Migrations.ApplicationDbMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "string1",
                            Email = "manager@manager.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@MANAGER.COM",
                            NormalizedUserName = "MANAGER@MANAGER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEjaR1E/iGB+XaDSNNdZM9zczIFeTGpmlEUnvqlvTy29qthma6iq/xtToIGSjS5bYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "656ddfb3-19a6-4b93-85a4-a60418b96559",
                            TwoFactorEnabled = false,
                            UserName = "manager@manager.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "string2",
                            Email = "employee@employee.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@EMPLOYEE.COM",
                            NormalizedUserName = "EMPLOYEE@EMPLOYEE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIh8sUdEg/CJLKzRbuB7qA1p3LRc02ZAjOMtc2pttFiFbxISUy/u0N9gPS3xfmabRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "656ddfb3-19a6-4b93-85a4-a60418b96559",
                            TwoFactorEnabled = false,
                            UserName = "employee@employee.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "string3",
                            Email = "member@member.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@MEMBER.COM",
                            NormalizedUserName = "MEMBER@MEMBER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2BSRUHQM9fCh0jb+mYgX4H+MYYLnYhFdx/1ePZn6q00SRtRboczPPvkyo2ysL3FA==",
                            PhoneNumber = "167761930",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "656ddfb3-19a6-4b93-85a4-a60418b96559",
                            TwoFactorEnabled = false,
                            UserName = "member@member.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReservationSystem.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Areas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Outside",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Balcony",
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("People", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "g@g.com",
                            FirstName = "Damien",
                            LastName = "Antonietti",
                            PhoneNumber = "015723892",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "h@h.com",
                            FirstName = "Andrew",
                            LastName = "Gardner",
                            PhoneNumber = "015656165",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 7,
                            Email = "j@j.com",
                            FirstName = "Brendan",
                            LastName = "Chappell",
                            PhoneNumber = "015723832",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 9,
                            Email = "k@k.com",
                            FirstName = "Conor",
                            LastName = "O'Neill",
                            PhoneNumber = "015725832",
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Guests")
                        .HasColumnType("int");

                    b.Property<int>("ReservationOriginId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SittingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationOriginId");

                    b.HasIndex("ReservationStatusId");

                    b.HasIndex("SittingId");

                    b.ToTable("Reservations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "By the balcony, please.",
                            CustomerId = 5,
                            Guests = 3,
                            ReservationOriginId = 1,
                            ReservationStatusId = 1,
                            SittingId = 1,
                            StartTime = new DateTime(2022, 7, 13, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "",
                            CustomerId = 8,
                            Guests = 4,
                            ReservationOriginId = 2,
                            ReservationStatusId = 2,
                            SittingId = 2,
                            StartTime = new DateTime(2022, 7, 13, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "",
                            CustomerId = 6,
                            Guests = 5,
                            ReservationOriginId = 3,
                            ReservationStatusId = 3,
                            SittingId = 3,
                            StartTime = new DateTime(2022, 7, 13, 18, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.ReservationOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationOrigins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Online"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Phone"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Walk-in"
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cancelled"
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "12 Springfield rd",
                            DefaultCapacity = 100,
                            Name = "Bean Scene",
                            PhoneNumber = "12345678"
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.Sitting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("PeopleBooked")
                        .HasColumnType("int");

                    b.Property<int>("ResDuration")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SittingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SittingTypeId");

                    b.ToTable("Sittings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            EndTime = new DateTime(2022, 7, 13, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            IsClosed = false,
                            PeopleBooked = 3,
                            ResDuration = 45,
                            RestaurantId = 1,
                            SittingTypeId = 1,
                            StartTime = new DateTime(2022, 7, 13, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 100,
                            EndTime = new DateTime(2022, 7, 13, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            IsClosed = false,
                            PeopleBooked = 4,
                            ResDuration = 0,
                            RestaurantId = 1,
                            SittingTypeId = 2,
                            StartTime = new DateTime(2022, 7, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 100,
                            EndTime = new DateTime(2022, 7, 13, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            IsClosed = false,
                            PeopleBooked = 5,
                            ResDuration = 0,
                            RestaurantId = 1,
                            SittingTypeId = 3,
                            StartTime = new DateTime(2022, 7, 13, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dinner"
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.SittingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SittingTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Breakfast",
                            ResDuration = 45
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lunch",
                            ResDuration = 60
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dinner",
                            ResDuration = 90
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("TableCapacity")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Tables", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            TableCapacity = 5,
                            TableName = "M1"
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 1,
                            TableCapacity = 3,
                            TableName = "M2"
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 1,
                            TableCapacity = 4,
                            TableName = "M3"
                        },
                        new
                        {
                            Id = 4,
                            AreaId = 1,
                            TableCapacity = 2,
                            TableName = "M4"
                        },
                        new
                        {
                            Id = 5,
                            AreaId = 1,
                            TableCapacity = 5,
                            TableName = "M5"
                        },
                        new
                        {
                            Id = 6,
                            AreaId = 1,
                            TableCapacity = 3,
                            TableName = "M6"
                        },
                        new
                        {
                            Id = 7,
                            AreaId = 1,
                            TableCapacity = 3,
                            TableName = "M7"
                        },
                        new
                        {
                            Id = 8,
                            AreaId = 1,
                            TableCapacity = 3,
                            TableName = "M8"
                        },
                        new
                        {
                            Id = 9,
                            AreaId = 1,
                            TableCapacity = 3,
                            TableName = "M9"
                        },
                        new
                        {
                            Id = 10,
                            AreaId = 1,
                            TableCapacity = 3,
                            TableName = "M10"
                        },
                        new
                        {
                            Id = 11,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O1"
                        },
                        new
                        {
                            Id = 12,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O2"
                        },
                        new
                        {
                            Id = 13,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O3"
                        },
                        new
                        {
                            Id = 14,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O4"
                        },
                        new
                        {
                            Id = 15,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O5"
                        },
                        new
                        {
                            Id = 16,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O6"
                        },
                        new
                        {
                            Id = 17,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O7"
                        },
                        new
                        {
                            Id = 18,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O8"
                        },
                        new
                        {
                            Id = 19,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O9"
                        },
                        new
                        {
                            Id = 20,
                            AreaId = 2,
                            TableCapacity = 3,
                            TableName = "O10"
                        },
                        new
                        {
                            Id = 21,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B1"
                        },
                        new
                        {
                            Id = 22,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B2"
                        },
                        new
                        {
                            Id = 23,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B3"
                        },
                        new
                        {
                            Id = 24,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B4"
                        },
                        new
                        {
                            Id = 25,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B5"
                        },
                        new
                        {
                            Id = 26,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B6"
                        },
                        new
                        {
                            Id = 27,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B7"
                        },
                        new
                        {
                            Id = 28,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B8"
                        },
                        new
                        {
                            Id = 29,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B9"
                        },
                        new
                        {
                            Id = 30,
                            AreaId = 3,
                            TableCapacity = 3,
                            TableName = "B10"
                        });
                });

            modelBuilder.Entity("ReservationTable", b =>
                {
                    b.Property<int>("ReservationsId")
                        .HasColumnType("int");

                    b.Property<int>("TablesId")
                        .HasColumnType("int");

                    b.HasKey("ReservationsId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("ReservationTable", (string)null);
                });

            modelBuilder.Entity("ReservationSystem.Data.Customer", b =>
                {
                    b.HasBaseType("ReservationSystem.Data.Person");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Email = "emilyd@d.com",
                            FirstName = "Emily",
                            LastName = "Smith",
                            PhoneNumber = "023462343",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "c.c@c.com",
                            FirstName = "Frederique",
                            LastName = "Corbyn",
                            PhoneNumber = "0232341789",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 8,
                            Email = "b.b@b.com",
                            FirstName = "John",
                            LastName = "Smith",
                            PhoneNumber = "3644253462",
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 12,
                            Email = "a.a@a.com",
                            FirstName = "William",
                            LastName = "Kemshell",
                            PhoneNumber = "023456789",
                            RestaurantId = 1,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("ReservationSystem.Data.Employee", b =>
                {
                    b.HasBaseType("ReservationSystem.Data.Person");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "t@k.com",
                            FirstName = "Kaleena",
                            LastName = "Byrne",
                            PhoneNumber = "023457123",
                            RestaurantId = 1,
                            EmployeeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "ok@k.com",
                            FirstName = "Kathleen",
                            LastName = "Smith",
                            PhoneNumber = "0298833412",
                            RestaurantId = 1,
                            EmployeeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Email = "pat@k.com",
                            FirstName = "Jim",
                            LastName = "Jones",
                            PhoneNumber = "023465123",
                            RestaurantId = 1,
                            EmployeeId = 3
                        },
                        new
                        {
                            Id = 11,
                            Email = "johndoe@k.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "023465153",
                            RestaurantId = 1,
                            EmployeeId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservationSystem.Data.Area", b =>
                {
                    b.HasOne("ReservationSystem.Data.Restaurant", "Restaurant")
                        .WithMany("Areas")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("ReservationSystem.Data.Person", b =>
                {
                    b.HasOne("ReservationSystem.Data.Restaurant", "Restaurant")
                        .WithMany("People")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("ReservationSystem.Data.Reservation", b =>
                {
                    b.HasOne("ReservationSystem.Data.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Data.ReservationOrigin", "ReservationOrigin")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationOriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Data.ReservationStatus", "ReservationStatus")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Data.Sitting", "Sitting")
                        .WithMany("Reservations")
                        .HasForeignKey("SittingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ReservationOrigin");

                    b.Navigation("ReservationStatus");

                    b.Navigation("Sitting");
                });

            modelBuilder.Entity("ReservationSystem.Data.Sitting", b =>
                {
                    b.HasOne("ReservationSystem.Data.Restaurant", "Restaurant")
                        .WithMany("Sittings")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Data.SittingType", "SittingType")
                        .WithMany("Sittings")
                        .HasForeignKey("SittingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("SittingType");
                });

            modelBuilder.Entity("ReservationSystem.Data.Table", b =>
                {
                    b.HasOne("ReservationSystem.Data.Area", "Area")
                        .WithMany("Tables")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("ReservationTable", b =>
                {
                    b.HasOne("ReservationSystem.Data.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationSystem.Data.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservationSystem.Data.Area", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ReservationSystem.Data.ReservationOrigin", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ReservationSystem.Data.ReservationStatus", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ReservationSystem.Data.Restaurant", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("People");

                    b.Navigation("Sittings");
                });

            modelBuilder.Entity("ReservationSystem.Data.Sitting", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ReservationSystem.Data.SittingType", b =>
                {
                    b.Navigation("Sittings");
                });

            modelBuilder.Entity("ReservationSystem.Data.Customer", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
